////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////

/////////////
// DEFINES //
/////////////
#define NUM_LIGHTS 3

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
	float ambientToggle;
	float diffuseToggle;
	float specularToggle;
	float fogToggle;
};

cbuffer LightColorBuffer
{
	float4 diffuseColors[NUM_LIGHTS];
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1; // E를 위한 Sementic
	float3 lightPos1 : TEXCOORD2;
	float3 lightPos2 : TEXCOORD3;
	float3 lightPos3 : TEXCOORD4;
    float fogFactor : FOG;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
    float4 specular;
	float lightIntensity1;
	float lightIntensity2;
	float lightIntensity3;
	float4 color1;
	float4 color2;
	float4 color3;
    float4 fogColor;
    float4 finalColor;


	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	// Set the default output color to the ambient light value for all pixels.
	if (ambientToggle == 1.0f)
	{
		color = ambientColor;
	}
	else
	{
		color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	}

	// Initialize the specular color.
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

	// Calculate the different amounts of light on this pixel based on the positions of the lights.
	lightIntensity1 = saturate(dot(input.normal, input.lightPos1));// 1/d제곱 적용을 해야 더 실감난다.
	lightIntensity2 = saturate(dot(input.normal, input.lightPos2));// 1/d제곱 적용을 해야 더 실감난다.
	lightIntensity3 = saturate(dot(input.normal, input.lightPos3));// 1/d제곱 적용을 해야 더 실감난다.
	
	// Determine the diffuse color amount of each lights.
	color1 = diffuseColors[0] * lightIntensity1;
	color2 = diffuseColors[1] * lightIntensity2;
	color3 = diffuseColors[2] * lightIntensity3;

	if(lightIntensity > 0.0f)
    {
		if (diffuseToggle == 1.0f)
		{
		    // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
			color += (diffuseColor * lightIntensity);

			// Saturate the ambient and diffuse color.
			color = saturate(color);
		}

		if (specularToggle == 1.0f)
		{
			// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
		    reflection = normalize(2 * lightIntensity * input.normal - lightDir); // R 계산

			// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
			specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower); // specular 만드는 공식
		}
	}

	color += saturate(color1);
	color += saturate(color2);
	color += saturate(color3);

    // Multiply the texture pixel and the input color to get the textured result.
	color = color * textureColor;

	// Add the specular component last to the output color.
    color = saturate(color + specular);

    // Set the color of the fog
    fogColor = float4(0.5f, 0.5f, 0.5f, 1.0f);

	// Calculate the final color using the fog effect equation.
    finalColor = input.fogFactor * color + (1.0 - input.fogFactor) * fogColor;

	if (fogToggle == 1.0f)
	{
		return finalColor;
	}
	else
	{
		return color;
	}
}